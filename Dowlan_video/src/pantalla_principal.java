
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author coron
 */
public class pantalla_principal extends javax.swing.JFrame {

    /**
     * Creates new form pantalla_principal
     */
   
    public pantalla_principal() {
        initComponents();
        
          progressbar.setVisible(false); 
    progressbar.setStringPainted(true); // Muestra el porcentaje
    add(progressbar); 
    
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        desca = new javax.swing.JButton();
        link = new javax.swing.JTextField();
        progressbar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Coloque el link del video:");

        desca.setText("Descargar");
        desca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descaActionPerformed(evt);
            }
        });

        link.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkActionPerformed(evt);
            }
        });

        progressbar.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(link, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(desca)))
                .addGap(15, 15, 15))
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(link, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addComponent(desca)
                .addGap(35, 35, 35)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void descaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descaActionPerformed
         String videoUrl = link.getText().trim();
    if (videoUrl.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese una URL válida.");
        return;
    }

    // Seleccionar carpeta de guardado
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int option = fileChooser.showOpenDialog(this);

    if (option == JFileChooser.APPROVE_OPTION) {
        File saveDir = fileChooser.getSelectedFile();
        String savePath = saveDir.getAbsolutePath();

        // Ruta al ejecutable yt-dlp
        String ytDlpPath = "C:\\Users\\coron\\Downloads\\yt-dlp.exe"; 

        // Comando para descargar el video
        String[] command = {
            ytDlpPath,
            "-o", savePath + "\\%(title)s.%(ext)s",
            "--retries", "10",
            videoUrl
        };

        // Mostrar la barra de progreso
        progressbar.setVisible(true);
        progressbar.setValue(0); // Reiniciar valor

        // Iniciar descarga
        new DownloadTask(command, progressbar).execute();
    }
    }//GEN-LAST:event_descaActionPerformed
class DownloadTask extends SwingWorker<Void, Integer> {
    private final String[] command;
    private final JProgressBar progressBar;

    public DownloadTask(String[] command, JProgressBar progressBar) {
        this.command = command;
        this.progressBar = progressBar;
    }

    @Override
    protected Void doInBackground() throws Exception {
        try {
            ProcessBuilder processBuilder = new ProcessBuilder(command);
            processBuilder.redirectErrorStream(true); // Combina salida y errores
            Process process = processBuilder.start();

            // Leer salida del proceso para obtener progreso real
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;

            while ((line = reader.readLine()) != null) {
                // Buscar líneas que contengan "[download]" y extraer el porcentaje
                if (line.contains("[download]")) {
                    // Usamos una expresión regular para extraer el porcentaje
                    java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("(\\d+)%");
                    java.util.regex.Matcher matcher = pattern.matcher(line);

                    if (matcher.find()) {
                        int progress = Integer.parseInt(matcher.group(1));
                        publish(progress); // Actualizar la barra de progreso
                    }
                }
            }

            int exitCode = process.waitFor();
            if (exitCode == 0) {
                publish(100); // Completado
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return null;
    }

    @Override
    protected void process(java.util.List<Integer> chunks) {
        int progress = chunks.get(chunks.size() - 1);
        progressBar.setValue(progress);
    }

    @Override
protected void done() {
    // Ocultar la barra de progreso al finalizar
    progressBar.setVisible(false);
    
    // Mostrar mensaje según el resultado
    if (progressBar.getValue() == 100) {
        JOptionPane.showMessageDialog(null, "Descarga completada.");
    } else {
        JOptionPane.showMessageDialog(null, "La descarga no se completó.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }
}
    private void linkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_linkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pantalla_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pantalla_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pantalla_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pantalla_principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new pantalla_principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton desca;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField link;
    private javax.swing.JProgressBar progressbar;
    // End of variables declaration//GEN-END:variables
}
